// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: api/device-tracker.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DeviceTrackerServiceClient is the client API for DeviceTrackerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceTrackerServiceClient interface {
	ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error)
}

type deviceTrackerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceTrackerServiceClient(cc grpc.ClientConnInterface) DeviceTrackerServiceClient {
	return &deviceTrackerServiceClient{cc}
}

func (c *deviceTrackerServiceClient) ToUpper(ctx context.Context, in *ToUpperRequest, opts ...grpc.CallOption) (*ToUpperResponse, error) {
	out := new(ToUpperResponse)
	err := c.cc.Invoke(ctx, "/device_tracker.DeviceTrackerService/ToUpper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceTrackerServiceServer is the server API for DeviceTrackerService service.
// All implementations must embed UnimplementedDeviceTrackerServiceServer
// for forward compatibility
type DeviceTrackerServiceServer interface {
	ToUpper(context.Context, *ToUpperRequest) (*ToUpperResponse, error)
	mustEmbedUnimplementedDeviceTrackerServiceServer()
}

// UnimplementedDeviceTrackerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceTrackerServiceServer struct {
}

func (UnimplementedDeviceTrackerServiceServer) ToUpper(context.Context, *ToUpperRequest) (*ToUpperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToUpper not implemented")
}
func (UnimplementedDeviceTrackerServiceServer) mustEmbedUnimplementedDeviceTrackerServiceServer() {}

// UnsafeDeviceTrackerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceTrackerServiceServer will
// result in compilation errors.
type UnsafeDeviceTrackerServiceServer interface {
	mustEmbedUnimplementedDeviceTrackerServiceServer()
}

func RegisterDeviceTrackerServiceServer(s grpc.ServiceRegistrar, srv DeviceTrackerServiceServer) {
	s.RegisterService(&DeviceTrackerService_ServiceDesc, srv)
}

func _DeviceTrackerService_ToUpper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToUpperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceTrackerServiceServer).ToUpper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device_tracker.DeviceTrackerService/ToUpper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceTrackerServiceServer).ToUpper(ctx, req.(*ToUpperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceTrackerService_ServiceDesc is the grpc.ServiceDesc for DeviceTrackerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceTrackerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device_tracker.DeviceTrackerService",
	HandlerType: (*DeviceTrackerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ToUpper",
			Handler:    _DeviceTrackerService_ToUpper_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/device-tracker.proto",
}
